//------------------------------------------------------------------------------
// <auto-generated>
//    Этот код был создан из шаблона.
//
//    Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//    Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Data.EntityClient;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Linq;
using System.Runtime.Serialization;
using System.Xml.Serialization;

[assembly: EdmSchemaAttribute()]
#region Метаданные связи EDM

[assembly: EdmRelationshipAttribute("DBModel", "ProjectProjectPart", "Project", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(TiMonSys.Project), "ProjectPart", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(TiMonSys.ProjectPart), true)]
[assembly: EdmRelationshipAttribute("DBModel", "ResponsibleFaceWorking", "ResponsibleFace", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(TiMonSys.ResponsibleFace), "Working", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(TiMonSys.Working), true)]
[assembly: EdmRelationshipAttribute("DBModel", "ProjectPartWorking", "ProjectPart", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(TiMonSys.ProjectPart), "Working", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(TiMonSys.Working), true)]

#endregion

namespace TiMonSys
{
    #region Контексты
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    public partial class DBEntities : ObjectContext
    {
        #region Конструкторы
    
        /// <summary>
        /// Инициализирует новый объект DBEntities, используя строку соединения из раздела "DBEntities" файла конфигурации приложения.
        /// </summary>
        public DBEntities() : base("name=DBEntities", "DBEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Инициализация нового объекта DBEntities.
        /// </summary>
        public DBEntities(string connectionString) : base(connectionString, "DBEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Инициализация нового объекта DBEntities.
        /// </summary>
        public DBEntities(EntityConnection connection) : base(connection, "DBEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Разделяемые методы
    
        partial void OnContextCreated();
    
        #endregion
    
        #region Свойства ObjectSet
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<ResponsibleFace> ResponsibleFaces
        {
            get
            {
                if ((_ResponsibleFaces == null))
                {
                    _ResponsibleFaces = base.CreateObjectSet<ResponsibleFace>("ResponsibleFaces");
                }
                return _ResponsibleFaces;
            }
        }
        private ObjectSet<ResponsibleFace> _ResponsibleFaces;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<Project> Projects
        {
            get
            {
                if ((_Projects == null))
                {
                    _Projects = base.CreateObjectSet<Project>("Projects");
                }
                return _Projects;
            }
        }
        private ObjectSet<Project> _Projects;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<ProjectPart> ProjectParts
        {
            get
            {
                if ((_ProjectParts == null))
                {
                    _ProjectParts = base.CreateObjectSet<ProjectPart>("ProjectParts");
                }
                return _ProjectParts;
            }
        }
        private ObjectSet<ProjectPart> _ProjectParts;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<Working> Workings
        {
            get
            {
                if ((_Workings == null))
                {
                    _Workings = base.CreateObjectSet<Working>("Workings");
                }
                return _Workings;
            }
        }
        private ObjectSet<Working> _Workings;

        #endregion

        #region Методы AddTo
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet ResponsibleFaces. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToResponsibleFaces(ResponsibleFace responsibleFace)
        {
            base.AddObject("ResponsibleFaces", responsibleFace);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet Projects. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToProjects(Project project)
        {
            base.AddObject("Projects", project);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet ProjectParts. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToProjectParts(ProjectPart projectPart)
        {
            base.AddObject("ProjectParts", projectPart);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet Workings. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToWorkings(Working working)
        {
            base.AddObject("Workings", working);
        }

        #endregion

    }

    #endregion

    #region Сущности
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="DBModel", Name="Project")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Project : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта Project.
        /// </summary>
        /// <param name="id">Исходное значение свойства Id.</param>
        /// <param name="name">Исходное значение свойства Name.</param>
        public static Project CreateProject(global::System.Int32 id, global::System.String name)
        {
            Project project = new Project();
            project.Id = id;
            project.Name = name;
            return project;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> CompletedDate
        {
            get
            {
                return _CompletedDate;
            }
            set
            {
                OnCompletedDateChanging(value);
                ReportPropertyChanging("CompletedDate");
                _CompletedDate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CompletedDate");
                OnCompletedDateChanged();
            }
        }
        private Nullable<global::System.DateTime> _CompletedDate;
        partial void OnCompletedDateChanging(Nullable<global::System.DateTime> value);
        partial void OnCompletedDateChanged();

        #endregion

    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DBModel", "ProjectProjectPart", "ProjectPart")]
        public EntityCollection<ProjectPart> ProjectParts
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<ProjectPart>("DBModel.ProjectProjectPart", "ProjectPart");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<ProjectPart>("DBModel.ProjectProjectPart", "ProjectPart", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="DBModel", Name="ProjectPart")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ProjectPart : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта ProjectPart.
        /// </summary>
        /// <param name="id">Исходное значение свойства Id.</param>
        /// <param name="name">Исходное значение свойства Name.</param>
        /// <param name="projectId">Исходное значение свойства ProjectId.</param>
        public static ProjectPart CreateProjectPart(global::System.Int32 id, global::System.String name, global::System.Int32 projectId)
        {
            ProjectPart projectPart = new ProjectPart();
            projectPart.Id = id;
            projectPart.Name = name;
            projectPart.ProjectId = projectId;
            return projectPart;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ProjectId
        {
            get
            {
                return _ProjectId;
            }
            set
            {
                OnProjectIdChanging(value);
                ReportPropertyChanging("ProjectId");
                _ProjectId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ProjectId");
                OnProjectIdChanged();
            }
        }
        private global::System.Int32 _ProjectId;
        partial void OnProjectIdChanging(global::System.Int32 value);
        partial void OnProjectIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> CompletedDate
        {
            get
            {
                return _CompletedDate;
            }
            set
            {
                OnCompletedDateChanging(value);
                ReportPropertyChanging("CompletedDate");
                _CompletedDate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CompletedDate");
                OnCompletedDateChanged();
            }
        }
        private Nullable<global::System.DateTime> _CompletedDate;
        partial void OnCompletedDateChanging(Nullable<global::System.DateTime> value);
        partial void OnCompletedDateChanged();

        #endregion

    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DBModel", "ProjectProjectPart", "Project")]
        public Project Project
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Project>("DBModel.ProjectProjectPart", "Project").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Project>("DBModel.ProjectProjectPart", "Project").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Project> ProjectReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Project>("DBModel.ProjectProjectPart", "Project");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Project>("DBModel.ProjectProjectPart", "Project", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DBModel", "ProjectPartWorking", "Working")]
        public EntityCollection<Working> Workings
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Working>("DBModel.ProjectPartWorking", "Working");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Working>("DBModel.ProjectPartWorking", "Working", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="DBModel", Name="ResponsibleFace")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ResponsibleFace : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта ResponsibleFace.
        /// </summary>
        /// <param name="id">Исходное значение свойства Id.</param>
        /// <param name="isLocked">Исходное значение свойства IsLocked.</param>
        public static ResponsibleFace CreateResponsibleFace(global::System.Int32 id, global::System.Boolean isLocked)
        {
            ResponsibleFace responsibleFace = new ResponsibleFace();
            responsibleFace.Id = id;
            responsibleFace.IsLocked = isLocked;
            return responsibleFace;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String LastName
        {
            get
            {
                return _LastName;
            }
            set
            {
                OnLastNameChanging(value);
                ReportPropertyChanging("LastName");
                _LastName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("LastName");
                OnLastNameChanged();
            }
        }
        private global::System.String _LastName;
        partial void OnLastNameChanging(global::System.String value);
        partial void OnLastNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String FirstName
        {
            get
            {
                return _FirstName;
            }
            set
            {
                OnFirstNameChanging(value);
                ReportPropertyChanging("FirstName");
                _FirstName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("FirstName");
                OnFirstNameChanged();
            }
        }
        private global::System.String _FirstName;
        partial void OnFirstNameChanging(global::System.String value);
        partial void OnFirstNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String MiddleName
        {
            get
            {
                return _MiddleName;
            }
            set
            {
                OnMiddleNameChanging(value);
                ReportPropertyChanging("MiddleName");
                _MiddleName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("MiddleName");
                OnMiddleNameChanged();
            }
        }
        private global::System.String _MiddleName;
        partial void OnMiddleNameChanging(global::System.String value);
        partial void OnMiddleNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Password
        {
            get
            {
                return _Password;
            }
            set
            {
                OnPasswordChanging(value);
                ReportPropertyChanging("Password");
                _Password = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Password");
                OnPasswordChanged();
            }
        }
        private global::System.String _Password;
        partial void OnPasswordChanging(global::System.String value);
        partial void OnPasswordChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean IsLocked
        {
            get
            {
                return _IsLocked;
            }
            set
            {
                OnIsLockedChanging(value);
                ReportPropertyChanging("IsLocked");
                _IsLocked = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("IsLocked");
                OnIsLockedChanged();
            }
        }
        private global::System.Boolean _IsLocked;
        partial void OnIsLockedChanging(global::System.Boolean value);
        partial void OnIsLockedChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Byte Role
        {
            get
            {
                return _Role;
            }
            set
            {
                OnRoleChanging(value);
                ReportPropertyChanging("Role");
                _Role = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Role");
                OnRoleChanged();
            }
        }
        private global::System.Byte _Role = 0;
        partial void OnRoleChanging(global::System.Byte value);
        partial void OnRoleChanged();

        #endregion

    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DBModel", "ResponsibleFaceWorking", "Working")]
        public EntityCollection<Working> Workings
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Working>("DBModel.ResponsibleFaceWorking", "Working");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Working>("DBModel.ResponsibleFaceWorking", "Working", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="DBModel", Name="Working")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Working : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта Working.
        /// </summary>
        /// <param name="id">Исходное значение свойства Id.</param>
        /// <param name="responsibleFaceId">Исходное значение свойства ResponsibleFaceId.</param>
        /// <param name="projectPartId">Исходное значение свойства ProjectPartId.</param>
        public static Working CreateWorking(global::System.Int32 id, global::System.Int32 responsibleFaceId, global::System.Int32 projectPartId)
        {
            Working working = new Working();
            working.Id = id;
            working.ResponsibleFaceId = responsibleFaceId;
            working.ProjectPartId = projectPartId;
            return working;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> TimeBegin
        {
            get
            {
                return _TimeBegin;
            }
            set
            {
                OnTimeBeginChanging(value);
                ReportPropertyChanging("TimeBegin");
                _TimeBegin = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("TimeBegin");
                OnTimeBeginChanged();
            }
        }
        private Nullable<global::System.DateTime> _TimeBegin;
        partial void OnTimeBeginChanging(Nullable<global::System.DateTime> value);
        partial void OnTimeBeginChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> TimeEnd
        {
            get
            {
                return _TimeEnd;
            }
            set
            {
                OnTimeEndChanging(value);
                ReportPropertyChanging("TimeEnd");
                _TimeEnd = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("TimeEnd");
                OnTimeEndChanged();
            }
        }
        private Nullable<global::System.DateTime> _TimeEnd;
        partial void OnTimeEndChanging(Nullable<global::System.DateTime> value);
        partial void OnTimeEndChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Description
        {
            get
            {
                return _Description;
            }
            set
            {
                OnDescriptionChanging(value);
                ReportPropertyChanging("Description");
                _Description = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Description");
                OnDescriptionChanged();
            }
        }
        private global::System.String _Description;
        partial void OnDescriptionChanging(global::System.String value);
        partial void OnDescriptionChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ResponsibleFaceId
        {
            get
            {
                return _ResponsibleFaceId;
            }
            set
            {
                OnResponsibleFaceIdChanging(value);
                ReportPropertyChanging("ResponsibleFaceId");
                _ResponsibleFaceId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ResponsibleFaceId");
                OnResponsibleFaceIdChanged();
            }
        }
        private global::System.Int32 _ResponsibleFaceId;
        partial void OnResponsibleFaceIdChanging(global::System.Int32 value);
        partial void OnResponsibleFaceIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ProjectPartId
        {
            get
            {
                return _ProjectPartId;
            }
            set
            {
                OnProjectPartIdChanging(value);
                ReportPropertyChanging("ProjectPartId");
                _ProjectPartId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ProjectPartId");
                OnProjectPartIdChanged();
            }
        }
        private global::System.Int32 _ProjectPartId;
        partial void OnProjectPartIdChanging(global::System.Int32 value);
        partial void OnProjectPartIdChanged();

        #endregion

    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DBModel", "ResponsibleFaceWorking", "ResponsibleFace")]
        public ResponsibleFace ResponsibleFace
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ResponsibleFace>("DBModel.ResponsibleFaceWorking", "ResponsibleFace").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ResponsibleFace>("DBModel.ResponsibleFaceWorking", "ResponsibleFace").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<ResponsibleFace> ResponsibleFaceReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ResponsibleFace>("DBModel.ResponsibleFaceWorking", "ResponsibleFace");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<ResponsibleFace>("DBModel.ResponsibleFaceWorking", "ResponsibleFace", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DBModel", "ProjectPartWorking", "ProjectPart")]
        public ProjectPart ProjectPart
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ProjectPart>("DBModel.ProjectPartWorking", "ProjectPart").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ProjectPart>("DBModel.ProjectPartWorking", "ProjectPart").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<ProjectPart> ProjectPartReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ProjectPart>("DBModel.ProjectPartWorking", "ProjectPart");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<ProjectPart>("DBModel.ProjectPartWorking", "ProjectPart", value);
                }
            }
        }

        #endregion

    }

    #endregion

    
}
